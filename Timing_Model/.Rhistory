options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = 1)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
version()
version
.18*10
.09*130
.04*250
.02*380
.01*230
230+10+380+250+130
34/1000
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = 1)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
traceplot(mod0_RE, c('logit_c1'))
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
par(las=1)
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma','logit_c1'))
sum(is.na(vhx_dat$Time_to_event))
range(is.na(vhx_dat$Time_to_event))
range((vhx_dat$Time_to_event))
str(vhx_dat)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
.05*IT
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .05*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .05*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
library(rstan)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5, !Right_Truncated)
setwd("~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model")
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5, !Right_Truncated)
MORU_SERVER = TRUE
if(MORU_SERVER){
.libPaths('/share/apps/Rlib')
}
library(plyr)
library(dplyr)
library(rstan)
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5, !Right_Truncated)
# We sort the ids so that ids go from 1...Nmax
ids = unique(vhx_dat$patientid)
rank_ids = 1:length(ids)
vhx_dat$ordered_ids = unlist(sapply(1:length(ids),
function(x) rep(rank_ids[x],
sum(vhx_dat$patientid==ids[x])))
)
N_index = as.integer(vhx_dat$ordered_ids)
# Turn drug into a numeric vector
numeric_drug = as.integer(revalue(vhx_dat$arm_num, c('AS'='0','CHQ'='1','CHQ/PMQ'='2')))
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .05*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
# mod1_RE = sampling(Timing_Model1_RE,
#                    data = c(VHXdata, Prior_params_M1),
#                    iter = IT,
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma','logit_c1'))
thetas = extract(mod0_RE)
thetas$logit_c1
dim(thetas$logit_p)
hist(apply(thetas$logit_p,2,median))
library(boot)
hist(inv.logit(apply(thetas$logit_p,2,median)))
inv.logit(3)
hist(inv.logit(thetas$logit_p))
hist(inv.logit(thetas$logit_c1))
thetas$Recrud_mean
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
traceplot(mod0_RE, c('Recrud_mean','Recrud_sd','logit_c1'))
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .01*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
par(las=1)
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
traceplot(mod0_RE, c('Recrud_mean','Recrud_sd','logit_c1'))
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5)#, !Right_Truncated)
# We sort the ids so that ids go from 1...Nmax
ids = unique(vhx_dat$patientid)
rank_ids = 1:length(ids)
vhx_dat$ordered_ids = unlist(sapply(1:length(ids),
function(x) rep(rank_ids[x],
sum(vhx_dat$patientid==ids[x])))
)
N_index = as.integer(vhx_dat$ordered_ids)
# Turn drug into a numeric vector
numeric_drug = as.integer(revalue(vhx_dat$arm_num, c('AS'='0','CHQ'='1','CHQ/PMQ'='2')))
vhx_dat$Right_Truncated
as.integer(vhx_dat$Right_Truncated)
table(as.integer(vhx_dat$Right_Truncated))
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .01*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .01*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
80/95
VHXdata = list(N         = as.integer(length(ids)),#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),#Number of durations
Durations = as.double(vhx_dat$Time_to_event),
#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),
#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),
#Number of durations
Durations = as.double(vhx_dat$Time_to_event),
#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),
#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
# mod1_RE = sampling(Timing_Model1_RE,
#                    data = c(VHXdata, Prior_params_M1),
#                    iter = IT, warmup = WarmUp
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),
#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),
#Number of durations
Durations = as.double(vhx_dat$Time_to_event),
#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),
#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
#
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
vhx_dat$Time_to_event[vhx_dat$Right_Truncated]
dnorm(300, mean = 10, sd = 1, log = T)
numeric_drug
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5)#, !Right_Truncated)
# We sort the ids so that ids go from 1...Nmax
ids = unique(vhx_dat$patientid)
rank_ids = 1:length(ids)
vhx_dat$ordered_ids = unlist(sapply(1:length(ids),
function(x) rep(rank_ids[x],
sum(vhx_dat$patientid==ids[x])))
)
N_index = as.integer(vhx_dat$ordered_ids)
# Turn drug into a numeric vector
numeric_drug = as.integer(revalue(vhx_dat$arm_num, c('AS'='0','CHQ'='1','CHQ/PMQ'='2')))
MORU_SERVER = TRUE
if(MORU_SERVER){
.libPaths('/share/apps/Rlib')
}
library(plyr)
library(dplyr)
library(rstan)
# The code is in a different file as it's very long
writeLines('Compiling model 0....')
source('StanModel0_0.R')
writeLines('Compiling model 1....')
#source('StanModel1.R')
#source('StanModel2.R')
#source('StanModel3.R')
# Load the dataset - already been partially cleaned
load('../../RData/VHX_ClinicalData.RData')
# Get rid of the very short durations
vhx_dat = filter(vhx_dat, Time_to_event > 5)#, !Right_Truncated)
# We sort the ids so that ids go from 1...Nmax
ids = unique(vhx_dat$patientid)
rank_ids = 1:length(ids)
vhx_dat$ordered_ids = unlist(sapply(1:length(ids),
function(x) rep(rank_ids[x],
sum(vhx_dat$patientid==ids[x])))
)
N_index = as.integer(vhx_dat$ordered_ids)
# Turn drug into a numeric vector
numeric_drug = as.integer(revalue(vhx_dat$arm_num, c('AS'='0','CHQ'='1','CHQ/PMQ'='2')))
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel0_0.R', echo=TRUE)
# Choose as many chains as available cores
Chains = 1
options(mc.cores = Chains)
IT = 1000
WarmUp = .5*IT
thin=1
# The hierachical parameters defining the prior distributions for model 1
Prior_params_M0 = list(mu_inv_lambda = 300,
sigma_inv_lambda = 25,
mu_inv_gamma = 40,
sigma_inv_gamma = 2,
Hyper_logit_mean_p = -3,
Hyper_logit_sd_p = 2,
Hyper_logit_exp_p = .5)
VHXdata = list(N         = as.integer(length(ids)),
#Number of individuals
Neps      = as.integer(nrow(vhx_dat)),
#Number of durations
Durations = as.double(vhx_dat$Time_to_event),
#Time to reinfection or time to censoring
Censored  = as.integer(vhx_dat$Right_Truncated),
#If the duration is right censored or not
Drug      = numeric_drug,
N_index   = N_index)
mod0_RE = sampling(Timing_Model0_RE,
data = c(VHXdata,Prior_params_M0),
iter = IT, warmup = WarmUp,
chains=Chains, thin = thin)
par(las=1)
traceplot(mod0_RE, c('inv_lambda','logit_mean_p', 'logit_sd_p','inv_gamma'))
traceplot(mod0_RE, c('Recrud_mean','Recrud_sd','logit_c1'))
inv.logit(-5)
inv.logit(-1.5)
hist(vhx_dat$Time_to_event[vhx_dat$arm_num=='CHQ/PMQ'])
hist(vhx_dat$Time_to_event[vhx_dat$arm_num=='CHQ/PMQ' & !vhx_dat$Right_Truncated], breaks = 0:400)
hist(vhx_dat$Time_to_event[vhx_dat$arm_num=='CHQ/PMQ' & !vhx_dat$Right_Truncated], breaks = 0:400, xlim=c(0,50))
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel1_0.R', echo=TRUE)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel1_0.R', echo=TRUE)
source('~/Dropbox/MORU/Vivax Relapses/Genotyping/Code/Timing_Model/StanModel1_0.R', echo=TRUE)
