N = nrow(AQ_dat); K=1000
A_MAX = 10
alphas= c(seq(A_MAX, 1, length.out = K), rep(1,K))
betas= c(rep(1,K), rev(seq(A_MAX, 1, length.out = K)))
Eff_TrialSize = SDs = array(dim=length(alphas))
Covariate_Avg = array(dim = length(alphas))
YS =  array(dim=c(3,length(alphas)))
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Covariate_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS[1,i] = YS[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS[3,i] = YS[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS = 100*YS
par(las=1)
layout(matrix(c(1,2,3,4), byrow = T, nrow = 2, ncol = 2))
plot(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[2,], type='l', xaxt='n', ylim = range(YS),
xlab='Effective Sample Size', ylab = 'Treatment effect', lwd=3)
lines(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[1,], lty=2, lwd=2)
lines(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[3,], lty=2, lwd=2)
axis(side = 1, at = c(N/2,N,3*N/2), labels = c(N/2,N,N/2))
abline(v=N, lty='dashed')
abline(h=0, lty='dashed',lwd=2, col='red')
plot(-(Covariate_Avg), (YS[2,]), type='l', ylim = range(YS),
xlab='Mean Linear Predictor (most to least ill)', ylab = 'Treatment effect', lwd=3)
lines(-(Covariate_Avg), (YS[1,]), lty=2, lwd=2)
lines(-(Covariate_Avg), (YS[3,]), lty=2, lwd=2)
abline(h=0, lty='dashed',lwd=2, col='red')
abline(v= -mean(AQ_dat$score), lty='dashed')
plot(AQ_dat$rank, 1000*Beta_weights(alphas[1], betas[1], N=N), type='l',
xlab = 'ranks from least to most ill', ylab = 'relative weight',lwd=3,
main='Extreme Left')
plot(AQ_dat$rank, 1000*Beta_weights(alphas[2*K], betas[2*K], N=N), type='l',
xlab = 'ranks from least to most ill', ylab = 'relative weight',lwd=3,
main='Extreme Right')
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2))
plot((Covariate_Avg), (YS[2,]), type='l', ylim = range(YS),
xlab='Mean Linear Predictor (most to least ill)',
ylab = 'Treatment effect', lwd=3, col=main_col,
xlim = range(c(Mean_Study_Scores, Covariate_Avg)))
lines((Covariate_Avg), (YS[1,]), lty=2, lwd=2, col=main_col)
lines((Covariate_Avg), (YS[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS[c(1,3),K], lwd=2, lty='dotted')
abline(v= Mean_Study_Scores, col = mycols,
lty = 2:3, lwd=3)
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Covariate_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 3, text = 'Effective Sample Size')
legend('topright', col = mycols, legend = studies,
lty = 2:3, lwd=3)
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2))
plot((Covariate_Avg), (YS[2,]), type='l', ylim = range(YS),
xlab='Mean Linear Predictor (most to least ill)',
ylab = 'Treatment effect', lwd=3, col=main_col,
xlim = range(c(Mean_Study_Scores, Covariate_Avg)))
lines((Covariate_Avg), (YS[1,]), lty=2, lwd=2, col=main_col)
lines((Covariate_Avg), (YS[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS[c(1,3),K], lwd=2, lty='dotted')
abline(v= Mean_Study_Scores, col = mycols,
lty = 2:3, lwd=3)
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Covariate_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 3, text = 'Effective Sample Size')
legend('topleft', col = mycols, legend = studies,
lty = 2:3, lwd=3)
library(haven)
merge_Hct_Virak_IPC <- read_dta("C:/Users/James Watson/Dropbox/MORU/RBC modelling/Cambodian data/merge-Hct-Virak-IPC.dta")
View(merge_Hct_Virak_IPC)
hist(merge_Hct_Virak_IPC$mcv0)
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID)
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
Leg_data = m[,]  # for the plotting
Leg_data = Leg_data[!Leg_data$studyID %in% 'AQGambia',]
library(lme4)
library(mgcv)
require(boot)
BD_and_bicarbonate = !is.na(Leg_data$BD) & !is.na(Leg_data$bicarbonate)
print(paste('We have ', sum(BD_and_bicarbonate), 'observations for both bicarbonate and base deficit'))
mod_impute1 = lmer(BD ~ bicarbonate + (1 | studyID) + (1 | country), data= Leg_data[BD_and_bicarbonate,])
missing_BD = is.na(Leg_data$BD)
Available_Bicarbonate = !is.na(Leg_data$bicarbonate)
print(paste(sum(missing_BD & Available_Bicarbonate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Bicarbonate] = predict(mod_impute1,newdata=Leg_data[missing_BD & Available_Bicarbonate,], re.form=NA)
BD_and_lactate = !is.na(Leg_data$BD) & !is.na(Leg_data$lactate)
print(paste('We have ', sum(BD_and_lactate), 'observations for both lactate and base deficit'))
if(length(unique(Leg_data$studyID[BD_and_lactate]))==1){
mod_impute2 = lm(BD ~ lactate, data= Leg_data[BD_and_lactate,])
} else {
mod_impute2 = lmer(BD ~ lactate + (1 | studyID), data= Leg_data[BD_and_lactate,])
}
missing_BD = is.na(Leg_data$BD)
Available_Lactate = !is.na(Leg_data$lactate)
print(paste(sum(missing_BD & Available_Lactate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Lactate] = predict(mod_impute2,newdata=Leg_data[missing_BD & Available_Lactate,], re.form=NA)
BD_and_rr = !is.na(Leg_data$BD) & !is.na(Leg_data$rr)
print(paste('We have ', sum(BD_and_rr), 'observations for both resp rate and base deficit'))
mod_impute3 = lmer(BD ~ rr + (1 | studyID), data= Leg_data[BD_and_rr,])
missing_BD = is.na(Leg_data$BD)
Available_rr = !is.na(Leg_data$rr)
print(paste(sum(missing_BD & Available_rr), 'observations will now be imputed'))
Leg_data$BD[missing_BD & Available_rr] = predict(mod_impute3,newdata=Leg_data[missing_BD & Available_rr,], re.form=NA)
BUN_and_cr = !is.na(Leg_data$BUN) & !is.na(Leg_data$creatinine)
print(paste('We have ', sum(BUN_and_cr), 'observations for both blood urea nitrogen and creatinine'))
mod_impute4 = lmer(BUN ~ creatinine + (1 | studyID), data= Leg_data[BUN_and_cr,])
missing_BUN = is.na(Leg_data$BUN)
Available_cr = !is.na(Leg_data$creatinine)
print(paste(sum(missing_BUN & Available_cr), 'observations will now be imputed'))
Leg_data$BUN[missing_BUN & Available_cr] = predict(mod_impute4,newdata=Leg_data[missing_BUN & Available_cr,], re.form=NA)
vars_interest = c('outcome','HCT','LPAR_pct','BD','BUN','poedema',
'convulsions','coma','AgeInYear','drug_class')
complete_cases = apply(Leg_data[,vars_interest], 1, function(x) sum(is.na(x))) == 0
Complete_Leg_data = Leg_data[complete_cases,] # for the model fitting
Complete_Leg_data$studyID = as.factor(as.character(Complete_Leg_data$studyID))
# Whole dataset
table(Leg_data$studyID)
# in the complete dataset (all variables recorded)
table(Complete_Leg_data$studyID)
Complete_Leg_data$drug_AS = 0
Complete_Leg_data$drug_AS[Complete_Leg_data$drug_class=='artemisinin']=1
# remove infinite log parasitaemias
ind_keep = !(is.infinite(Complete_Leg_data$LPAR_pct) | is.nan(Complete_Leg_data$LPAR_pct))
Complete_Leg_data = Complete_Leg_data[ind_keep,]
Complete_Leg_data$shock = as.numeric(Complete_Leg_data$shock)
Complete_Leg_data$poedema = as.numeric(Complete_Leg_data$poedema)
Complete_Leg_data$convulsions = as.numeric(Complete_Leg_data$convulsions)
Complete_Leg_data$country=as.factor(Complete_Leg_data$country)
Africa = c('The Gambia','Mozambique','Ghana','Kenya','Nigeria','Tanzania','Uganda','Rwanda','Congo')
Asia = c('Thailand','Vietnam','Bangladesh','Myanmar','India','Indonesia')
writeLines(paste('Children in Africa:',
sum(Complete_Leg_data$AgeInYear < 15 & Complete_Leg_data$country %in% Africa)))
writeLines(paste('Adults in Africa:',
sum(Complete_Leg_data$AgeInYear >= 15 & Complete_Leg_data$country %in% Africa)))
writeLines(paste('Children in Asia:',
sum(Complete_Leg_data$AgeInYear < 15 & Complete_Leg_data$country %in% Asia)))
writeLines(paste('Adults in Asia:',
sum(Complete_Leg_data$AgeInYear >= 15 & Complete_Leg_data$country %in% Asia)))
vars_interest
m$LPAR_pct[is.infinite(m$LPAR_pct)] = 0
m$drug_class = as.factor(m$drug_class)
m$poedema = as.factor(m$poedema)
m$coma = as.factor(m$coma)
m$convulsions = as.factor(m$convulsions)
Leg_impute = missForest(m[,vars_interest])
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID)
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
Leg_data = m[,]  # for the plotting
Leg_data = Leg_data[!Leg_data$studyID %in% 'AQGambia',]
library(lme4)
library(mgcv)
require(boot)
BD_and_bicarbonate = !is.na(Leg_data$BD) & !is.na(Leg_data$bicarbonate)
print(paste('We have ', sum(BD_and_bicarbonate), 'observations for both bicarbonate and base deficit'))
mod_impute1 = lmer(BD ~ bicarbonate + (1 | studyID) + (1 | country), data= Leg_data[BD_and_bicarbonate,])
missing_BD = is.na(Leg_data$BD)
Available_Bicarbonate = !is.na(Leg_data$bicarbonate)
print(paste(sum(missing_BD & Available_Bicarbonate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Bicarbonate] = predict(mod_impute1,newdata=Leg_data[missing_BD & Available_Bicarbonate,], re.form=NA)
BD_and_lactate = !is.na(Leg_data$BD) & !is.na(Leg_data$lactate)
print(paste('We have ', sum(BD_and_lactate), 'observations for both lactate and base deficit'))
if(length(unique(Leg_data$studyID[BD_and_lactate]))==1){
mod_impute2 = lm(BD ~ lactate, data= Leg_data[BD_and_lactate,])
} else {
mod_impute2 = lmer(BD ~ lactate + (1 | studyID), data= Leg_data[BD_and_lactate,])
}
missing_BD = is.na(Leg_data$BD)
Available_Lactate = !is.na(Leg_data$lactate)
print(paste(sum(missing_BD & Available_Lactate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Lactate] = predict(mod_impute2,newdata=Leg_data[missing_BD & Available_Lactate,], re.form=NA)
BD_and_rr = !is.na(Leg_data$BD) & !is.na(Leg_data$rr)
print(paste('We have ', sum(BD_and_rr), 'observations for both resp rate and base deficit'))
mod_impute3 = lmer(BD ~ rr + (1 | studyID), data= Leg_data[BD_and_rr,])
missing_BD = is.na(Leg_data$BD)
Available_rr = !is.na(Leg_data$rr)
print(paste(sum(missing_BD & Available_rr), 'observations will now be imputed'))
Leg_data$BD[missing_BD & Available_rr] = predict(mod_impute3,newdata=Leg_data[missing_BD & Available_rr,], re.form=NA)
BUN_and_cr = !is.na(Leg_data$BUN) & !is.na(Leg_data$creatinine)
print(paste('We have ', sum(BUN_and_cr), 'observations for both blood urea nitrogen and creatinine'))
mod_impute4 = lmer(BUN ~ creatinine + (1 | studyID), data= Leg_data[BUN_and_cr,])
missing_BUN = is.na(Leg_data$BUN)
Available_cr = !is.na(Leg_data$creatinine)
print(paste(sum(missing_BUN & Available_cr), 'observations will now be imputed'))
Leg_data$BUN[missing_BUN & Available_cr] = predict(mod_impute4,newdata=Leg_data[missing_BUN & Available_cr,], re.form=NA)
vars_interest = c('outcome','HCT','LPAR_pct','BD','BUN','poedema',
'convulsions','coma','AgeInYear','drug_class')
complete_cases = apply(Leg_data[,vars_interest], 1, function(x) sum(is.na(x))) == 0
Complete_Leg_data = Leg_data[complete_cases,] # for the model fitting
Complete_Leg_data$studyID = as.factor(as.character(Complete_Leg_data$studyID))
# Whole dataset
table(Leg_data$studyID)
# in the complete dataset (all variables recorded)
table(Complete_Leg_data$studyID)
Complete_Leg_data$drug_AS = 0
Complete_Leg_data$drug_AS[Complete_Leg_data$drug_class=='artemisinin']=1
# remove infinite log parasitaemias
ind_keep = !(is.infinite(Complete_Leg_data$LPAR_pct) | is.nan(Complete_Leg_data$LPAR_pct))
Complete_Leg_data = Complete_Leg_data[ind_keep,]
Complete_Leg_data$shock = as.numeric(Complete_Leg_data$shock)
Complete_Leg_data$poedema = as.numeric(Complete_Leg_data$poedema)
Complete_Leg_data$convulsions = as.numeric(Complete_Leg_data$convulsions)
Complete_Leg_data$country=as.factor(Complete_Leg_data$country)
Africa = c('The Gambia','Mozambique','Ghana','Kenya','Nigeria','Tanzania','Uganda','Rwanda','Congo')
Asia = c('Thailand','Vietnam','Bangladesh','Myanmar','India','Indonesia')
writeLines(paste('Children in Africa:',
sum(Complete_Leg_data$AgeInYear < 15 & Complete_Leg_data$country %in% Africa)))
writeLines(paste('Adults in Africa:',
sum(Complete_Leg_data$AgeInYear >= 15 & Complete_Leg_data$country %in% Africa)))
writeLines(paste('Children in Asia:',
sum(Complete_Leg_data$AgeInYear < 15 & Complete_Leg_data$country %in% Asia)))
writeLines(paste('Adults in Asia:',
sum(Complete_Leg_data$AgeInYear >= 15 & Complete_Leg_data$country %in% Asia)))
m$LPAR_pct[is.infinite(m$LPAR_pct)] = 0
m$drug_class = as.factor(m$drug_class)
m$poedema = as.factor(m$poedema)
m$coma = as.factor(m$coma)
m$convulsions = as.factor(m$convulsions)
require(missForest)
Leg_impute = missForest(m[,vars_interest])
Leg_impute$OOBerror
dim(Leg_impute$ximp)
Leg_impute = missForest(xmis = m[,vars_interest], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = T)
Leg_impute = missForest(xmis = m[,vars_interest], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = 'forests')
require(doParallel)
require(doParallel)
registerDoParallel(cores = 4)
Leg_impute = missForest(xmis = m[,vars_interest], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = 'forests')
vars_interest
colnames(m)
require(doParallel)
registerDoParallel(cores = 4)
impute_vars = c(vars_interest, 'rr', 'lactate', 'bicarbonate', 'creatinine')
Leg_impute = missForest(xmis = m[,vars_interest], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = 'forests')
Leg_impute$OOBerror
require(doParallel)
registerDoParallel(cores = 4)
impute_vars = c(vars_interest, 'rr', 'lactate', 'bicarbonate', 'creatinine')
Leg_impute = missForest(xmis = m[,impute_vars], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = 'forests')
Leg_impute$OOBerror
Errors = Leg_impute$OOBerror
names(Errors) = impute_vars
Errors
dim(Leg_impute$ximp)
library(readxl)
GRM_hemolysis_for_Nick <- read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
View(GRM_hemolysis_for_Nick)
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
plot(grim_data$Day, grim_data$Hb, type = 'pch')
library(RColorBrewer)
brewer.pal(n = 12, name = 'Dark2')
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb, type = 'pch')
plot(grim_data$Day, grim_data$Hb, type = NA)
plot(grim_data$Day, grim_data$Hb)
grim_data$
grim_data$PMQ
View(grim_data)
ids = unique(grim_data$Code)
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb)
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id & grim_data$PMQ=='Y'
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb)
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id & grim_data$PMQ=='Y'
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2)
ind = grim_data$Code==id & grim_data$PMQ=='N'
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
which(cumsum(grim_data$PMQ[ind]=='Y')<1)
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb)
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = which(cumsum(grim_data$PMQ[ind]=='Y')<1)
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb)
ids = unique(grim_data$Code)
i=1
ind = grim_data$Code==id
ind1 = which(cumsum(grim_data$PMQ[ind]=='Y')<1)
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
ind1 = which(grim_data$PMQ[ind]=='Y')
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb)
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb, pch='.')
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
plot(grim_data$Day, grim_data$Hb, pch='.', xlab='Day since start of primaquine',
ylab='Haemoglobin')
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
cols = brewer.pal(n = 12, name = 'Dark2')
par(las=1, bty='n')
plot(grim_data$Day, grim_data$Hb, pch='.',
xlab='Day since start of primaquine',
ylab='Haemoglobin')
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
library(dplyr)
grim_data = filter(grim_data, !is.na(Hb))
cols = brewer.pal(n = 12, name = 'Dark2')
par(las=1, bty='n')
plot(grim_data$Day, grim_data$Hb, pch='.',
xlab='Day since start of primaquine',
ylab='Haemoglobin')
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
library(dplyr)
grim_data = filter(grim_data, !is.na(Hb))
cols = brewer.pal(n = 12, name = 'Dark2')
par(las=1, bty='n')
plot(grim_data$Day, grim_data$Hb, pch='.',
xlab='Day since start of primaquine',
ylab='Haemoglobin')
ids = unique(grim_data$Code)
i=1
ids
i=7
id=ids[7]
grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
ind = grim_data$Code==id
ind1 = grim_data$PMQ[ind]=='Y' & ind
grim_data = read_excel("C:/Users/James Watson/Dropbox/GRM_hemolysis_for Nick.xlsx")
library(RColorBrewer)
library(dplyr)
grim_data = filter(grim_data, !is.na(Hb))
cols = brewer.pal(n = 12, name = 'Dark2')
par(las=1, bty='n')
plot(grim_data$Day, grim_data$Hb, pch='.',
xlab='Day since start of primaquine',
ylab='Haemoglobin')
ids = unique(grim_data$Code)
i=1
for(id in ids){
ind = grim_data$Code==id
ind1 = grim_data$PMQ=='Y' & ind
lines(grim_data$Day[ind1], grim_data$Hb[ind1], col=cols[i], lwd=2)
lines(grim_data$Day[ind], grim_data$Hb[ind], col=cols[i], lwd=2, lty=2)
i=i+1
}
setwd("C:/Users/James Watson/Dropbox/MORU/Vivax Relapses/RecurrentVivax/Timing_Model")
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE, cache.lazy = F,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
library(plyr)
library(dplyr)
library(rstan)
library(boot)
library(RColorBrewer)
require(gdata)
# Note that recompilation is necessary on different platforms
RECOMPILE_MODELS = F
# Running the full stan models can take several days
RUN_MODELS = F
if(RECOMPILE_MODELS){
writeLines('Compiling model 0....')
source('StanModel0.R')
save(Timing_Model0, file = '../RData/TimingModel/Timing_Model0.RData')
} else {
load('../RData/TimingModel/Timing_Model0.RData')
}
if(RECOMPILE_MODELS){
writeLines('Compiling model 1....')
source('StanModel1.R')
save(Timing_Model1, file = '../RData/TimingModel/Timing_Model1.RData')
} else {
load('../RData/TimingModel/Timing_Model1.RData')
}
if(RECOMPILE_MODELS){
writeLines('Compiling model 2....')
source('StanModel2.R')
save(Timing_Model2, file = '../RData/TimingModel/Timing_Model2.RData')
} else {
load('../RData/TimingModel/Timing_Model2.RData')
}
if(RECOMPILE_MODELS){
writeLines('Compiling model 3....')
source('StanModel3.R')
save(Timing_Model3, file = '../RData/TimingModel/Timing_Model3.RData')
} else {
load('../RData/TimingModel/Timing_Model3.RData')
}
load('../RData/TimingModel/Combined_Time_Event.RData')
# Get rid of the very short durations
Combined_Time_Data = filter(Combined_Time_Data, !(Censored > -1 & Time_to_event < 5))
hist(Combined_Time_Data[Combined_Time_Data$Censored== -1])
hist(Combined_Time_Data$WeekTime[Combined_Time_Data$Censored== -1])
