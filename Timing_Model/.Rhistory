echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
RUN_M_IMPUTATION = F
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID) | m$studyID %in% 'AQGambia'
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
m$drug_AS = 0
m$drug_AS[m$drug_class=='artemisinin']=1
Leg_data = m[,]  # for the plotting
library(lme4)
library(mgcv)
require(boot)
require(doParallel)
require(mitools)
require(missForest)
library(plyr)
library(merTools)
m$LPAR_pct[is.infinite(m$LPAR_pct)] = 0
m$drug_class = as.factor(m$drug_class)
m$poedema = as.factor(m$poedema)
m$coma = as.factor(m$coma)
m$convulsions = as.factor(m$convulsions)
if(RUN_M_IMPUTATION){
registerDoParallel(cores = 6)
impute_vars = c('shock','coma','LPAR_pct','BD','BUN','poedema','HCT',
'convulsions',"AgeInYear",
'rr', 'lactate', 'bicarbonate', 'creatinine')
SM_Impute_List = list()
K = 210
for(i in 1:K){
Imputed_SM_vars = missForest(xmis = m[,impute_vars], decreasing = T,
maxiter = 10,
variablewise = T,parallelize = 'forests')
SM_data = Imputed_SM_vars$ximp
SM_data = cbind(SM_data, m[,c('outcome','studyID','country','drug_AS')])
SM_Impute_List[[i]] = SM_data
}
save(SM_Impute_List, file = 'RData/Multiple_Imputed_Datasets.RData')
} else {
load(file = 'RData/Multiple_Imputed_Datasets.RData')
}
DAG_fmla = "outcome ~ HCT + LPAR_pct + coma + convulsions + poedema + log10(BUN) + BD + shock + drug_AS + (1 | studyID) + (1 | country)"
modList= glmerModList(DAG_fmla, data = SM_Impute_List, family=binomial)
x=SM_Impute_List[[1]]
x=SM_Impute_List[[2]]
SM_Impute_List[[1]] = NULL
x=SM_Impute_List[[1]]
DAG_fmla = "outcome ~ HCT + LPAR_pct + coma + convulsions + poedema + log10(BUN) + BD + shock + drug_AS + (1 | studyID) + (1 | country)"
modList= glmerModList(DAG_fmla, data = SM_Impute_List, family=binomial)
fixef(modList)
modelRandEffStats(modList)
exp(fixef(modList))
modelFixedEff(modList)
Effs = modelFixedEff(modList)
apply(Effs, 1, function(x) return(c(exp(x['estimate']-1.96*x['std.error']),
exp(x['estimate']),
exp(x['estimate']-1.96*x['std.error'])))
)
Effs = modelFixedEff(modList)
apply(Effs, 1, function(x) {
z = c(exp(x['estimate']-1.96*x['std.error']),
exp(x['estimate']),
exp(x['estimate']-1.96*x['std.error']))
return(z)
}
)
apply(Effs, 1, function(x) {
z = c(exp(x['estimate']))
return(z)
}
)
apply(Effs, 1, function(x) {
z = c(exp(x$estimate))
return(z)
}
)
exp(Effs$estimate)
Effs = modelFixedEff(modList)
Effs = modelFixedEff(modList)
Results = data.frame(lowerCI = exp(Effs$estimate - 1.96*Effs$std.error),
mean = exp(Effs$estimate),
upperCI = exp(Effs$estimate + 1.96*Effs$std.error))
Results = data.frame(lowerCI = exp(Effs$estimate - 1.96*Effs$std.error),
mean = exp(Effs$estimate),
upperCI = exp(Effs$estimate + 1.96*Effs$std.error))
rownames(Results) = Effs$term
View(Results)
rownames(Results)
Scalar_f = c(1, 5, 1, 1, 1, 10, 1, 1, 1, 1, 1)
Results = data.frame(lowerCI = Scalar_f*exp(Effs$estimate - 1.96*Effs$std.error),
mean = exp(Effs$estimate),
upperCI = exp(Effs$estimate + 1.96*Effs$std.error))
Scalar_f = c(1, 5, 1, 1, 1, 10, 1, 1, 1, 1)
Results = data.frame(lowerCI = Scalar_f*exp(Effs$estimate - 1.96*Effs$std.error),
mean = exp(Effs$estimate),
upperCI = exp(Effs$estimate + 1.96*Effs$std.error))
Scalar_f = c(1, 5, 1, 1, 1, 10, 1, 1, 1, 1)
Results = data.frame(lowerCI = Scalar_f*exp(Effs$estimate - 1.96*Effs$std.error),
mean = Scalar_f*exp(Effs$estimate),
upperCI = Scalar_f*exp(Effs$estimate + 1.96*Effs$std.error))
rownames(Results) = Effs$term
Results
View(Results)
Scalar_f = c(1, 5, 1, 1, 1, 10, 1, 1, 1, 1)
Results = data.frame(lowerCI = exp(Scalar_f*(Effs$estimate - 1.96*Effs$std.error)),
mean = exp(Scalar_f*(Effs$estimate)),
upperCI = exp(Scalar_f*(Effs$estimate + 1.96*Effs$std.error)))
rownames(Results) = Effs$term
Results
Africa = c('The Gambia','Mozambique','Ghana','Kenya','Nigeria','Tanzania','Uganda','Rwanda','Congo')
Asia = c('Thailand','Vietnam','Bangladesh','Myanmar','India','Indonesia')
writeLines(paste('Children in Africa:',
sum(m$AgeInYear < 15 & m$country %in% Africa)))
writeLines(paste('Adults in Africa:',
sum(m$AgeInYear >= 15 & m$country %in% Africa)))
writeLines(paste('Children in Asia:',
sum(m$AgeInYear < 15 & m$country %in% Asia)))
writeLines(paste('Adults in Asia:',
sum(m$AgeInYear >= 15 & m$country %in% Asia)))
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID) | m$studyID %in% 'AQGambia' | is.na(m$AgeInYear)
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
m$drug_AS = 0
m$drug_AS[m$drug_class=='artemisinin']=1
Leg_data = m[,]  # for the plotting
sum(m$LPAR_pct==0)
sum(is.na(m$LPAR_pct) | m$LPAR_pct==0 )
sum(m$LPAR_pct==0,na.rm=T)
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
RUN_M_IMPUTATION = F
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID) | m$studyID %in% 'AQGambia' | is.na(m$AgeInYear)
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
m$drug_AS = 0
m$drug_AS[m$drug_class=='artemisinin']=1
Leg_data = m[,]  # for the plotting
library(lme4)
library(mgcv)
require(boot)
require(doParallel)
require(mitools)
require(missForest)
library(plyr)
library(merTools)
BD_and_bicarbonate = !is.na(Leg_data$BD) & !is.na(Leg_data$bicarbonate)
print(paste('We have ', sum(BD_and_bicarbonate), 'observations for both bicarbonate and base deficit'))
mod_impute1 = lmer(BD ~ bicarbonate + (1 | studyID) + (1 | country), data= Leg_data[BD_and_bicarbonate,])
missing_BD = is.na(Leg_data$BD)
Available_Bicarbonate = !is.na(Leg_data$bicarbonate)
print(paste(sum(missing_BD & Available_Bicarbonate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Bicarbonate] = predict(mod_impute1,newdata=Leg_data[missing_BD & Available_Bicarbonate,], re.form=NA)
BD_and_lactate = !is.na(Leg_data$BD) & !is.na(Leg_data$lactate)
print(paste('We have ', sum(BD_and_lactate), 'observations for both lactate and base deficit'))
if(length(unique(Leg_data$studyID[BD_and_lactate]))==1){
mod_impute2 = lm(BD ~ lactate, data= Leg_data[BD_and_lactate,])
} else {
mod_impute2 = lmer(BD ~ lactate + (1 | studyID), data= Leg_data[BD_and_lactate,])
}
missing_BD = is.na(Leg_data$BD)
Available_Lactate = !is.na(Leg_data$lactate)
print(paste(sum(missing_BD & Available_Lactate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Lactate] = predict(mod_impute2,newdata=Leg_data[missing_BD & Available_Lactate,], re.form=NA)
BD_and_rr = !is.na(Leg_data$BD) & !is.na(Leg_data$rr)
print(paste('We have ', sum(BD_and_rr), 'observations for both resp rate and base deficit'))
mod_impute3 = lmer(BD ~ rr + (1 | studyID), data= Leg_data[BD_and_rr,])
missing_BD = is.na(Leg_data$BD)
Available_rr = !is.na(Leg_data$rr)
print(paste(sum(missing_BD & Available_rr), 'observations will now be imputed'))
Leg_data$BD[missing_BD & Available_rr] = predict(mod_impute3,newdata=Leg_data[missing_BD & Available_rr,], re.form=NA)
BUN_and_cr = !is.na(Leg_data$BUN) & !is.na(Leg_data$creatinine)
print(paste('We have ', sum(BUN_and_cr), 'observations for both blood urea nitrogen and creatinine'))
mod_impute4 = lmer(BUN ~ creatinine + (1 | studyID), data= Leg_data[BUN_and_cr,])
missing_BUN = is.na(Leg_data$BUN)
Available_cr = !is.na(Leg_data$creatinine)
print(paste(sum(missing_BUN & Available_cr), 'observations will now be imputed'))
Leg_data$BUN[missing_BUN & Available_cr] = predict(mod_impute4,newdata=Leg_data[missing_BUN & Available_cr,], re.form=NA)
vars_interest = c('outcome','HCT','LPAR_pct','BD','BUN','poedema',
'convulsions','coma','AgeInYear','drug_class')
complete_cases = apply(Leg_data[,vars_interest], 1, function(x) sum(is.na(x))) == 0
Complete_Leg_data = Leg_data[complete_cases,] # for the model fitting
Complete_Leg_data$studyID = as.factor(as.character(Complete_Leg_data$studyID))
# Whole dataset
table(Leg_data$studyID)
# in the complete dataset (all variables recorded)
table(Complete_Leg_data$studyID)
# remove infinite log parasitaemias
ind_keep = !(is.infinite(Complete_Leg_data$LPAR_pct) | is.nan(Complete_Leg_data$LPAR_pct))
Complete_Leg_data = Complete_Leg_data[ind_keep,]
Complete_Leg_data$shock = as.numeric(Complete_Leg_data$shock)
Complete_Leg_data$poedema = as.numeric(Complete_Leg_data$poedema)
Complete_Leg_data$convulsions = as.numeric(Complete_Leg_data$convulsions)
Complete_Leg_data$country=as.factor(Complete_Leg_data$country)
Africa = c('The Gambia','Mozambique','Ghana','Kenya','Nigeria','Tanzania','Uganda','Rwanda','Congo')
Asia = c('Thailand','Vietnam','Bangladesh','Myanmar','India','Indonesia')
writeLines(paste('Children in Africa:',
sum(m$AgeInYear < 15 & m$country %in% Africa)))
writeLines(paste('Adults in Africa:',
sum(m$AgeInYear >= 15 & m$country %in% Africa)))
writeLines(paste('Children in Asia:',
sum(m$AgeInYear < 15 & m$country %in% Asia)))
writeLines(paste('Adults in Asia:',
sum(m$AgeInYear >= 15 & m$country %in% Asia)))
sum(is.na(m$drug))
sum(is.na(m$studyID))
apply(m,2, function(x) sum(is.na(x)))
498/nrow(m)
867/nrow(m)
1871/nrow(m)
2325/nrow(m)
3628/nrow(m)
358/nrow(m)
7940/nrow(m)
1494/nrow(m)
7193/nrow(m)
?predictInterval
str(modList)
citation("merTools")
citation("mgcv")
print(citation("mgcv"), bibtex=T)
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
load('RData/Data.R')
# some basic data cleaning - probably should move this to the MakeRData r script
m$drug_class = as.factor(m$drug_class)
rm_ind = is.na(m$outcome) | is.na(m$studyID) | m$studyID %in% 'AQGambia' | is.na(m$AgeInYear)
m = m[!rm_ind, ]
m$BUN[m$BUN > 140] = 140
Leg_data = m[,]  # for the plotting
library(lme4)
# For the GAM modelling
library(mgcv)
# For the CART modelling
library(rpart)
library(rpart.plot)
BD_and_bicarbonate = !is.na(Leg_data$BD) & !is.na(Leg_data$bicarbonate)
print(paste('We have ', sum(BD_and_bicarbonate), 'observations for both bicarbonate and base deficit'))
mod_impute1 = lmer(BD ~ bicarbonate + (1 | studyID) + (1 | country), data= Leg_data[BD_and_bicarbonate,])
missing_BD = is.na(Leg_data$BD)
Available_Bicarbonate = !is.na(Leg_data$bicarbonate)
print(paste(sum(missing_BD & Available_Bicarbonate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Bicarbonate] = predict(mod_impute1,newdata=Leg_data[missing_BD & Available_Bicarbonate,], re.form=NA)
BD_and_lactate = !is.na(Leg_data$BD) & !is.na(Leg_data$lactate)
print(paste('We have ', sum(BD_and_lactate), 'observations for both lactate and base deficit'))
if(length(unique(Leg_data$studyID[BD_and_lactate]))==1){
mod_impute2 = lm(BD ~ lactate, data= Leg_data[BD_and_lactate,])
} else {
mod_impute2 = lmer(BD ~ lactate + (1 | studyID), data= Leg_data[BD_and_lactate,])
}
missing_BD = is.na(Leg_data$BD)
Available_Lactate = !is.na(Leg_data$lactate)
print(paste(sum(missing_BD & Available_Lactate), 'observations will now be imputed'))
# impute with model
Leg_data$BD[missing_BD & Available_Lactate] = predict(mod_impute2,newdata=Leg_data[missing_BD & Available_Lactate,], re.form=NA)
BD_and_rr = !is.na(Leg_data$BD) & !is.na(Leg_data$rr)
print(paste('We have ', sum(BD_and_rr), 'observations for both resp rate and base deficit'))
mod_impute3 = lmer(BD ~ rr + (1 | studyID), data= Leg_data[BD_and_rr,])
missing_BD = is.na(Leg_data$BD)
Available_rr = !is.na(Leg_data$rr)
print(paste(sum(missing_BD & Available_rr), 'observations will now be imputed'))
Leg_data$BD[missing_BD & Available_rr] = predict(mod_impute3,newdata=Leg_data[missing_BD & Available_rr,], re.form=NA)
BUN_and_cr = !is.na(Leg_data$BUN) & !is.na(Leg_data$creatinine)
print(paste('We have ', sum(BUN_and_cr), 'observations for both blood urea nitrogen and creatinine'))
mod_impute4 = lmer(BUN ~ creatinine + (1 | studyID), data= Leg_data[BUN_and_cr,])
missing_BUN = is.na(Leg_data$BUN)
Available_cr = !is.na(Leg_data$creatinine)
print(paste(sum(missing_BUN & Available_cr), 'observations will now be imputed'))
Leg_data$BUN[missing_BUN & Available_cr] = predict(mod_impute4,newdata=Leg_data[missing_BUN & Available_cr,], re.form=NA)
vars_interest = c('outcome','HCT','LPAR_pct','BD','BUN','poedema',
'convulsions','coma','AgeInYear','drug_class')
complete_cases = apply(Leg_data[,vars_interest], 1, function(x) sum(is.na(x))) == 0
Complete_Leg_data = Leg_data[complete_cases,] # for the model fitting
Complete_Leg_data$studyID = as.factor(as.character(Complete_Leg_data$studyID))
# Whole dataset
table(Leg_data$studyID)
# in the complete dataset (all variables recorded)
table(Complete_Leg_data$studyID)
Complete_Leg_data$drug_AS = 0
Complete_Leg_data$drug_AS[Complete_Leg_data$drug_class=='artemisinin']=1
# remove infinite log parasitaemias
ind_keep = !(is.infinite(Complete_Leg_data$LPAR_pct) | is.nan(Complete_Leg_data$LPAR_pct))
Complete_Leg_data = Complete_Leg_data[ind_keep,]
for(s in unique(Complete_Leg_data$studyID)){
print(paste(s, ', mortality of:', round(100*mean(Complete_Leg_data$outcome[Complete_Leg_data$studyID==s])),'%'))
}
for(s in unique(m$studyID)){
print(paste(s, ', mortality of:', round(100*mean(m$outcome[m$studyID==s])),'%'))
}
for(s in unique(m$studyID)){
print(paste0(s, ', ages:', round(quantile(m$AgeInYear[m$studyID==s], probs = c(0,.5,1))), collapse = ' '))
}
for(s in unique(m$studyID)){
print(s)
print(table(m$drug[m$studyID==s]))
}
par(las=1, mfrow=c(2,2), mar=c(4,4,1,1), bty='n')
## Base Excess and HCT
plot(jitter(Leg_data$HCT,amount=1), jitter(Leg_data$BD),
col=Leg_data$studyID, pch='*', xlab='Haematocrit (%)',
ylab='Base Deficit')
mod_HCT_BD = gam(formula = BD ~ s(HCT) + s(studyID, bs='re') +
s(country, bs='re'),
data = Complete_Leg_data)
summary(mod_HCT_BD)
ys = predict(object = mod_HCT_BD,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$HCT,amount=1), Leg_data$LPAR_pct,
col=Leg_data$studyID, pch='*', xlab='Haematocrit (%)',
ylab='Log10 % parasitised RBCs')
mod_HCT_LPAR = gam(formula = LPAR_pct ~ s(HCT) + s(studyID, bs='re') +
s(country, bs='re'),
data = Complete_Leg_data)
summary(mod_HCT_LPAR)
ys = predict(object = mod_HCT_LPAR,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## BUN and BD
plot(jitter(log10(Leg_data$BUN),amount=.1), jitter(Leg_data$BD),
col=Leg_data$studyID, pch='*', xlab='Blood Urea Nitrogen (mmol/L)',
ylab='Base Deficit', xaxt='n')
axis(1, at=c(log10(2), 1, 2), labels = c(2,10,100))
mod_BUN_BD = gam(formula = BD ~ s(log10(BUN)) + s(studyID, bs='re') +
s(country, bs='re'),
data = Complete_Leg_data)
summary(mod_BUN_BD)
ys = predict(object = mod_BUN_BD,
newdata = data.frame(BUN=2:166,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(log10(2:166), ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$AgeInYear,amount=1), Leg_data$HCT,
col=Leg_data$studyID, pch='*', xlab='Age in years',
ylab='Haematocrit')
mod_Age_HCT = gam(formula = HCT ~ s(AgeInYear)  + s(studyID, bs='re') +
s(country, bs='re'),
data = Complete_Leg_data)
summary(mod_Age_HCT)
ys = predict(object = mod_Age_HCT,
newdata = data.frame(AgeInYear=0:80,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(0:80, ys, lwd=3, col='black')
Leg_data$studyID
require(RColorBrewer)
?brewer.pal
mycols = brewer.pal(length(unique(m$studyID)), 'Set1')
mycols
unique(m$studyID)
m$color = revalue(m$studyID, replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5]))
Leg_data$color = revalue(Leg_data$studyID, replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5]))
mycols = brewer.pal(length(unique(m$studyID)), 'Set1')
Leg_data$color = revalue(Leg_data$studyID, replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5]))
par(las=1, mfrow=c(2,2), mar=c(4,4,1,1), bty='n')
## Base Excess and HCT
plot(jitter(Leg_data$HCT,amount=1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Base Deficit')
summary(mod_HCT_BD)
ys = predict(object = mod_HCT_BD,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$HCT,amount=1), Leg_data$LPAR_pct,
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Log10 % parasitised RBCs')
summary(mod_HCT_LPAR)
ys = predict(object = mod_HCT_LPAR,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## BUN and BD
plot(jitter(log10(Leg_data$BUN),amount=.1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Blood Urea Nitrogen (mmol/L)',
ylab='Base Deficit', xaxt='n')
axis(1, at=c(log10(2), 1, 2), labels = c(2,10,100))
summary(mod_BUN_BD)
ys = predict(object = mod_BUN_BD,
newdata = data.frame(BUN=2:166,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(log10(2:166), ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$AgeInYear,amount=1), Leg_data$HCT,
col=Leg_data$color, pch='*', xlab='Age in years',
ylab='Haematocrit')
summary(mod_Age_HCT)
ys = predict(object = mod_Age_HCT,
newdata = data.frame(AgeInYear=0:80,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(0:80, ys, lwd=3, col='black')
mycols = brewer.pal(length(unique(m$studyID)), 'Set1')
Leg_data$color = as.character(revalue(Leg_data$studyID,
replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5])))
plot(jitter(Leg_data$HCT,amount=1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Base Deficit')
mycols = brewer.pal(length(unique(m$studyID)), 'Accent')
Leg_data$color = as.character(revalue(Leg_data$studyID,
replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5])))
plot(jitter(Leg_data$HCT,amount=1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Base Deficit')
mycols = brewer.pal(length(unique(m$studyID)), 'Accent')
Leg_data$color = as.character(revalue(Leg_data$studyID,
replace = c('Core Malaria'=mycols[1],
'AAV'=mycols[2],
'AQ'=mycols[3],
'SEAQUAMAT' = mycols[4],
'AQUAMAT' = mycols[5])))
par(las=1, mfrow=c(2,2), mar=c(4,4,1,1), bty='n')
## Base Excess and HCT
plot(jitter(Leg_data$HCT,amount=1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Base Deficit')
ys = predict(object = mod_HCT_BD,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$HCT,amount=1), Leg_data$LPAR_pct,
col=Leg_data$color, pch='*', xlab='Haematocrit (%)',
ylab='Log10 % parasitised RBCs')
ys = predict(object = mod_HCT_LPAR,
newdata = data.frame(HCT=8:50,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(8:50, ys, lwd=3, col='black')
## BUN and BD
plot(jitter(log10(Leg_data$BUN),amount=.1), jitter(Leg_data$BD),
col=Leg_data$color, pch='*', xlab='Blood Urea Nitrogen (mmol/L)',
ylab='Base Deficit', xaxt='n')
axis(1, at=c(log10(2), 1, 2), labels = c(2,10,100))
ys = predict(object = mod_BUN_BD,
newdata = data.frame(BUN=2:166,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(log10(2:166), ys, lwd=3, col='black')
## Parasitaemia and Anaemia
plot(jitter(Leg_data$AgeInYear,amount=1), Leg_data$HCT,
col=Leg_data$color, pch='*', xlab='Age in years',
ylab='Haematocrit')
writeLines(paste('Overall mortality of:',round(100*mean(m$outcome))))
ys = predict(object = mod_Age_HCT,
newdata = data.frame(AgeInYear=0:80,
studyID='AQ',
country='Vietnam'),
exclude = c("s(country)","s(studyID)"))
lines(0:80, ys, lwd=3, col='black')
writeLines(paste('Overall mortality of:',round(100*mean(m$outcome))))
